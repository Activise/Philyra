/*
 * generated by Xtext 2.23.0
 */
package io.activise.philyra.scoping

import io.activise.philyra.philyra.EAttribute
import io.activise.philyra.philyra.EDto
import io.activise.philyra.philyra.EDtoExlude
import io.activise.philyra.philyra.EEntity
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PhilyraScopeProvider extends AbstractPhilyraScopeProvider {
  override getScope(EObject context, EReference reference) {
    if (context instanceof EAttribute) {
      if ("opposite".equals(reference.name)) {
        val entity = context.getContainerOfType(EEntity)
        val attributes = context.type.getAllContentsOfType(EAttribute)
        return Scopes.scopeFor(attributes.filter[type.equals(entity)])
      }
    }

    if (context instanceof EDtoExlude) {
      if ("field".equals(reference.name)) {
        val dto = context.getContainerOfType(EDto)
        val attributes = dto?.entity.attributes
        if (attributes !== null) {
          return Scopes.scopeFor(attributes)
        }
      }
    }

    return super.getScope(context, reference)
  }
}
