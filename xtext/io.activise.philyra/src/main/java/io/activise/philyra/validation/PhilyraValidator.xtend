/*
 * generated by Xtext 2.23.0
 */
package io.activise.philyra.validation

import io.activise.philyra.philyra.EAbstractType
import io.activise.philyra.philyra.EAttribute
import io.activise.philyra.philyra.ECompilationUnit
import io.activise.philyra.philyra.EEntity
import io.activise.philyra.philyra.EPackageDeclaration
import io.activise.philyra.philyra.PhilyraPackage
import org.eclipse.xtext.validation.Check

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PhilyraValidator extends AbstractPhilyraValidator {
  @Check
  def checkUniqueAttributeName(EAttribute attribute) {
    val entity = attribute.getContainerOfType(EEntity);
    if (entity.attributes.exists[it != attribute && name.equals(attribute.name)]) {
      error('''The attribute '«attribute.getName()»' is already declared!''', attribute, PhilyraPackage.Literals.EATTRIBUTE__NAME);
    }
  }

  @Check
  def checkUniqueEntityName(EAbstractType abstractType) {
    val compilationUnit = abstractType.getContainerOfType(ECompilationUnit)
    val currentPackage = abstractType.getContainerOfType(EPackageDeclaration)
    val abstractTypes = currentPackage !== null ? currentPackage.getAllContentsOfType(EAbstractType) : compilationUnit.getAllContentsOfType(EAbstractType);

    if (abstractTypes.exists[it != abstractType && name.equals(abstractType.name)]) {
      error('''The entity/type '«abstractType.name»' is already declared!''', abstractType, PhilyraPackage.Literals.EABSTRACT_TYPE__NAME);
    }
  }

  @Check
  def checkRedundantModifiers(EAttribute attribute) {
    val it = attribute.modifiers;
    if (isId && (isUnique || isIndex || isPk)) {
      warning("The modifier 'id' is equivalent to 'unique index pk'", attribute, PhilyraPackage.Literals.EATTRIBUTE__MODIFIERS);
    }
  }

  @Check
  def checkTooManyPkAttributes(EAttribute attribute) {
    val it = attribute.getContainerOfType(EEntity)
    val hasPkAttribute = attributes.exists[it != attribute && isPkAttribute(it)]
    if (hasPkAttribute && isPkAttribute(attribute)) {
      error(attribute.name + " There are multiple attributes with an 'id' or 'pk' modifier", attribute, PhilyraPackage.Literals.EATTRIBUTE__MODIFIERS)
    }
  }
  
  def boolean isPkAttribute(EAttribute attribute) {
    val it = attribute.modifiers;
    return isId || isPk;
  }

}
